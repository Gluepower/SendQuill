// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth-related models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                String        @id @default(cuid())
  name              String?
  email             String?       @unique
  emailVerified     DateTime?
  image             String?
  accounts          Account[]
  sessions          Session[]
  contactLists      ContactList[]
  templates         Template[]
  campaigns         Campaign[]
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}

model ContactList {
  id          String    @id @default(cuid())
  name        String
  description String?
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  contacts    Contact[]
  campaigns   Campaign[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Contact {
  id            String             @id @default(cuid())
  email         String
  contactListId String
  contactList   ContactList        @relation(fields: [contactListId], references: [id], onDelete: Cascade)
  fields        Json               // Store custom fields as JSON
  campaigns     CampaignRecipient[]
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt

  @@unique([email, contactListId])
}

model Template {
  id          String    @id @default(cuid())
  name        String
  description String?
  content     String
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  campaigns   Campaign[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Campaign {
  id            String             @id @default(cuid())
  name          String
  subject       String
  content       String
  status        String             // draft, scheduled, sent
  scheduledAt   DateTime?
  sentAt        DateTime?
  userId        String
  user          User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  templateId    String?
  template      Template?          @relation(fields: [templateId], references: [id])
  contactLists  ContactList[]
  recipients    CampaignRecipient[]
  followUp      FollowUp?
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
}

model CampaignRecipient {
  id          String    @id @default(cuid())
  campaignId  String
  contactId   String
  status      String    @default("PENDING") // PENDING, SENT, DELIVERED, FAILED
  sentAt      DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  campaign    Campaign  @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  contact     Contact   @relation(fields: [contactId], references: [id], onDelete: Cascade)
  events      Event[]

  @@index([campaignId])
  @@index([contactId])
}

model FollowUp {
  id            String    @id @default(cuid())
  campaignId    String    @unique
  campaign      Campaign  @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  subject       String
  content       String
  delayDays     Int
  status        String    // pending, sent, cancelled
  scheduledAt   DateTime?
  sentAt        DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Event {
  id                  String            @id @default(cuid())
  type                String            // OPEN, CLICK, BOUNCE, SPAM
  campaignRecipientId String
  metadata            Json?             // Additional data like click URL, bounce reason, etc.
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt

  campaignRecipient   CampaignRecipient @relation(fields: [campaignRecipientId], references: [id], onDelete: Cascade)

  @@index([campaignRecipientId])
  @@index([type])
}
